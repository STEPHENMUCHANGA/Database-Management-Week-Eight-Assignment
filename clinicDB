
-- Clinic Booking System SQL Schema (Regenerated)
-- MySQL compatible (MySQL 8+ recommended)
-- This script creates the database, tables, constraints, sample data, a view and a stored procedure.

DROP DATABASE IF EXISTS clinic_db;
CREATE DATABASE clinic_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
USE clinic_db;

-- Table: roles
CREATE TABLE roles (
    role_id INT AUTO_INCREMENT PRIMARY KEY,
    role_name VARCHAR(50) NOT NULL UNIQUE
);

-- Table: users
CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    full_name VARCHAR(150) NOT NULL,
    email VARCHAR(150) UNIQUE,
    phone VARCHAR(30),
    role_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Table: clinics
CREATE TABLE clinics (
    clinic_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    address TEXT,
    phone VARCHAR(30),
    timezone VARCHAR(50) DEFAULT 'UTC'
);

-- Table: specialties
CREATE TABLE specialties (
    specialty_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    description TEXT
);

-- Table: doctors
CREATE TABLE doctors (
    doctor_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NULL UNIQUE,
    title VARCHAR(20),
    full_name VARCHAR(150) NOT NULL,
    email VARCHAR(150) UNIQUE,
    phone VARCHAR(30),
    clinic_id INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (clinic_id) REFERENCES clinics(clinic_id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE SET NULL ON UPDATE CASCADE
);

-- Table: doctor_specialties (many-to-many)
CREATE TABLE doctor_specialties (
    doctor_id INT NOT NULL,
    specialty_id INT NOT NULL,
    PRIMARY KEY (doctor_id, specialty_id),
    FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (specialty_id) REFERENCES specialties(specialty_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table: patients
CREATE TABLE patients (
    patient_id INT AUTO_INCREMENT PRIMARY KEY,
    nhs_number VARCHAR(20) UNIQUE,
    full_name VARCHAR(150) NOT NULL,
    date_of_birth DATE,
    gender ENUM('Male','Female','Other','Prefer not to say') DEFAULT 'Prefer not to say',
    email VARCHAR(150),
    phone VARCHAR(30),
    address TEXT,
    emergency_contact_name VARCHAR(150),
    emergency_contact_phone VARCHAR(30),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Table: rooms
CREATE TABLE rooms (
    room_id INT AUTO_INCREMENT PRIMARY KEY,
    clinic_id INT,
    room_number VARCHAR(50),
    description VARCHAR(255),
    FOREIGN KEY (clinic_id) REFERENCES clinics(clinic_id) ON DELETE SET NULL ON UPDATE CASCADE
);

-- Table: appointments
CREATE TABLE appointments (
    appointment_id INT AUTO_INCREMENT PRIMARY KEY,
    patient_id INT NOT NULL,
    doctor_id INT NOT NULL,
    clinic_id INT NOT NULL,
    room_id INT NULL,
    appointment_date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    status ENUM('Scheduled','Completed','Cancelled','No-Show') DEFAULT 'Scheduled',
    reason VARCHAR(255),
    created_by INT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    confirmed_at TIMESTAMP NULL,
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (doctor_id) REFERENCES doctors(doctor_id) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (clinic_id) REFERENCES clinics(clinic_id) ON DELETE RESTRICT ON UPDATE CASCADE,
    FOREIGN KEY (room_id) REFERENCES rooms(room_id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (created_by) REFERENCES users(user_id) ON DELETE SET NULL ON UPDATE CASCADE,
    CONSTRAINT uc_doctor_slot UNIQUE (doctor_id, appointment_date, start_time)
);

-- Table: treatments
CREATE TABLE treatments (
    treatment_id INT AUTO_INCREMENT PRIMARY KEY,
    code VARCHAR(50) UNIQUE,
    name VARCHAR(150) NOT NULL,
    description TEXT,
    duration_minutes INT DEFAULT 30,
    price DECIMAL(10,2) DEFAULT 0.00
);

-- Table: appointment_treatments
CREATE TABLE appointment_treatments (
    appointment_id INT NOT NULL,
    treatment_id INT NOT NULL,
    notes TEXT,
    PRIMARY KEY (appointment_id, treatment_id),
    FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (treatment_id) REFERENCES treatments(treatment_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Table: prescriptions
CREATE TABLE prescriptions (
    prescription_id INT AUTO_INCREMENT PRIMARY KEY,
    appointment_id INT NOT NULL,
    prescribed_by INT,
    medication TEXT NOT NULL,
    dosage VARCHAR(255),
    instructions TEXT,
    issued_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (prescribed_by) REFERENCES users(user_id) ON DELETE SET NULL ON UPDATE CASCADE
);

-- Table: payments
CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    appointment_id INT NULL,
    patient_id INT NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    currency CHAR(3) DEFAULT 'GBP',
    method ENUM('PayPal','Card','M-Pesa','Cash','Insurance') DEFAULT 'Card',
    status ENUM('Pending','Completed','Failed','Refunded') DEFAULT 'Pending',
    transaction_ref VARCHAR(255),
    paid_at TIMESTAMP NULL,
    FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id) ON DELETE CASCADE ON UPDATE CASCADE
);

-- Table: insurance_providers
CREATE TABLE insurance_providers (
    provider_id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(150) NOT NULL,
    contact_info TEXT
);

-- Table: patient_insurance
CREATE TABLE patient_insurance (
    patient_id INT NOT NULL,
    provider_id INT NOT NULL,
    policy_number VARCHAR(100),
    PRIMARY KEY (patient_id, provider_id),
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (provider_id) REFERENCES insurance_providers(provider_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Table: interpreters
CREATE TABLE interpreters (
    interpreter_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(150) NOT NULL,
    languages VARCHAR(255) NOT NULL,
    phone VARCHAR(30),
    available BOOLEAN DEFAULT TRUE
);

-- Table: appointment_interpreters
CREATE TABLE appointment_interpreters (
    appointment_id INT NOT NULL,
    interpreter_id INT NOT NULL,
    PRIMARY KEY (appointment_id, interpreter_id),
    FOREIGN KEY (appointment_id) REFERENCES appointments(appointment_id) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY (interpreter_id) REFERENCES interpreters(interpreter_id) ON DELETE RESTRICT ON UPDATE CASCADE
);

-- Indexes
CREATE INDEX idx_appointments_patient ON appointments(patient_id);
CREATE INDEX idx_appointments_doctor ON appointments(doctor_id);
CREATE INDEX idx_appointments_date ON appointments(appointment_date);
CREATE INDEX idx_doctors_clinic ON doctors(clinic_id);

-- Sample data
INSERT INTO roles (role_name) VALUES ('Admin'), ('Receptionist'), ('Clinician');

INSERT INTO users (username, password_hash, full_name, email, phone, role_id)
VALUES
('admin','$2y$examplehash','System Admin','admin@example.com','+441234567890',1),
('recept1','$2y$examplehash','Receptionist One','recept1@example.com','+441234567891',2);

INSERT INTO clinics (name, address, phone, timezone) VALUES
('Central Clinic','123 Main St, City','+441234000000','Europe/London'),
('Eastside Clinic','45 East Rd, City','+441234000001','Europe/London');

INSERT INTO specialties (name, description) VALUES
('General Practice','Primary care'),
('Paediatrics','Child health'),
('ENT','Ear Nose Throat');

INSERT INTO doctors (user_id, title, full_name, email, phone, clinic_id) VALUES
(NULL,'Dr','Amina Mwangi','amina.mwangi@example.com','+441234000010',1),
(NULL,'Dr','John Ochieng','john.ochieng@example.com','+441234000011',2);

INSERT INTO doctor_specialties (doctor_id, specialty_id) VALUES (1,1),(1,3),(2,1),(2,2);

INSERT INTO patients (nhs_number, full_name, date_of_birth, gender, email, phone, address, emergency_contact_name, emergency_contact_phone) VALUES
('NHS001','Grace Kimani','1985-04-12','Female','grace.k@example.com','+441234000100','12 Rose St','Peter Kimani','+441234000200'),
('NHS002','Mark Otieno','1990-09-01','Male','mark.o@example.com','+441234000101','34 Lake Rd','Joan Otieno','+441234000201');

INSERT INTO rooms (clinic_id, room_number, description) VALUES (1,'R101','Consultation Room 1'), (2,'R201','Consultation Room 2');

INSERT INTO treatments (code, name, description, duration_minutes, price) VALUES
('TRT001','General Consultation','Standard GP consultation',30,25.00),
('TRT002','Child Checkup','Paediatric routine check',30,30.00);

INSERT INTO appointments (patient_id, doctor_id, clinic_id, room_id, appointment_date, start_time, end_time, status, reason, created_by)
VALUES (1,1,1,1,'2025-10-01','09:00:00','09:30:00','Scheduled','Routine check',2);

INSERT INTO appointment_treatments (appointment_id, treatment_id, notes) VALUES (1,1,'General symptoms');

INSERT INTO interpreters (full_name, languages, phone, available) VALUES ('Mary Wanjiru','Swahili,English','+441234000300',TRUE);

INSERT INTO appointment_interpreters (appointment_id, interpreter_id) VALUES (1,1);

INSERT INTO payments (appointment_id, patient_id, amount, currency, method, status, transaction_ref, paid_at)
VALUES (1,1,25.00,'GBP','Card','Completed','TXN12345',NOW());

-- View: appointments summary
CREATE OR REPLACE VIEW vw_appointments_summary AS
SELECT a.appointment_id, a.appointment_date, a.start_time, a.end_time,
       p.patient_id, p.full_name AS patient_name, d.doctor_id, d.full_name AS doctor_name,
       a.status, a.reason, c.name AS clinic_name, r.room_number
FROM appointments a
JOIN patients p ON p.patient_id = a.patient_id
JOIN doctors d ON d.doctor_id = a.doctor_id
JOIN clinics c ON c.clinic_id = a.clinic_id
LEFT JOIN rooms r ON r.room_id = a.room_id;

-- Stored procedure: book_appointment
DELIMITER $$
CREATE PROCEDURE book_appointment (
    IN p_patient_id INT,
    IN p_doctor_id INT,
    IN p_clinic_id INT,
    IN p_room_id INT,
    IN p_app_date DATE,
    IN p_start TIME,
    IN p_end TIME,
    IN p_reason VARCHAR(255),
    IN p_created_by INT
)
BEGIN
    DECLARE v_count INT DEFAULT 0;
    SELECT COUNT(*) INTO v_count FROM appointments
      WHERE doctor_id = p_doctor_id AND appointment_date = p_app_date AND start_time = p_start AND status = 'Scheduled';
    IF v_count > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Doctor slot already booked';
    ELSE
        INSERT INTO appointments (patient_id, doctor_id, clinic_id, room_id, appointment_date, start_time, end_time, reason, created_by)
        VALUES (p_patient_id, p_doctor_id, p_clinic_id, p_room_id, p_app_date, p_start, p_end, p_reason, p_created_by);
    END IF;
END $$
DELIMITER ;
